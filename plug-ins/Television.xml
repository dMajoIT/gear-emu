<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plugin[<!ELEMENT plugin (instance, reference*, code)>
<!ATTLIST plugin version CDATA "1.0">
<!ELEMENT instance EMPTY>
<!ATTLIST instance class CDATA #REQUIRED>
<!ELEMENT reference EMPTY>
<!ATTLIST reference name CDATA #REQUIRED>
<!ELEMENT code (#PCDATA)>
<!ATTLIST code codeFileName CDATA #IMPLIED>]>
<plugin version="1.0">
  <instance class="Television" />
  <code><![CDATA[//Assemblies needed for GEAR plugin system.
using Gear.EmulationCore;
using Gear.PluginSupport;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;

//Class declaration of plugin.
class Television : PluginBase
{
	const double ColorCarrier = 1.0 / 3579545.0;
	const double SampleTime = ColorCarrier / 16.0;  // Amount of time for 1/16th of a color phase
	const double RoundSquare = ColorCarrier / 64.0;
	const int PixelPitch = 4;                       // Horizontal resolution divide

	private double LastTime;
	private double SampleError;
	private int PixelError;
	private Bitmap Picture;

	private double[] BackLog;
	private int BackLogIndex;

	private double SyncTime;
	private bool MidRaster;

	private int Voltage;

	private int RasterX;
	private int RasterY;

	private bool Syncing;

	//Constructor for plugin initialization.
	public Television(PropellerCPU chip) : base(chip)
	{
		Picture = new Bitmap(910, 600, System.Drawing.Imaging.PixelFormat.Format24bppRgb);

		LastTime = 0;
		RasterX = RasterY = 0;
		BackLog = new double[10];
		BackLogIndex = 0;
	}

	//Title to be shown in tab.
	public override string Title
	{
		get { return "Television"; }
	}

	protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
	{
		e.Graphics.DrawImage(Picture, 0, 0);
	}

	public override void OnReset()
	{
		Graphics graph = Graphics.FromImage(Picture);
		graph.Clear(Color.Black);
		LastTime = 0;
		RasterX = RasterY = 0;
		for (int i = 0; i < BackLog.Length; i++)
			BackLog[i] = 0;
		BackLogIndex = 0;
	}

	//To repaint the plugin screen.
	public override void Repaint(bool force)
	{
		CreateGraphics().DrawImage(Picture, 0, 0);
	}

	//Register the events to be notified to this plugin.
	public override void PresentChip()
	{
		NotifyOnPins();
	}

	private Color HSVtoRGB(double h, double s, double v)
	{
		int i;
		double f, p, q, t;

		v *= 255;

		if (s == 0)
			return Color.FromArgb((int)v, (int)v, (int)v);

		h *= 5.0;
		while (h < 0.0)
			h += 5;

		i = (int)h;
		f = h - i;          // factorial part of h
		p = v * (1 - s);
		q = v * (1 - s * f);
		t = v * (1 - s * (1 - f));

		switch (i)
		{
			case 0:
				return Color.FromArgb((int)v, (int)t, (int)p);
			case 1:
				return Color.FromArgb((int)q, (int)v, (int)p);
			case 2:
				return Color.FromArgb((int)p, (int)v, (int)t);
			case 3:
				return Color.FromArgb((int)p, (int)q, (int)v);
			case 4:
				return Color.FromArgb((int)t, (int)p, (int)v);
			default:        // case 5:
				return Color.FromArgb((int)v, (int)p, (int)q);
		}

	}

	double prior;
	double chroma;
	double baseChroma;

	//Called every time a pin changes, only if it was registered on
	//method PresentChip() above.
	public override void OnPinChange(double time, PinState[] pinStates)
	{
		double delta = time - LastTime;
		LastTime = time;

		// Run lowpass on signal to get the current gray level
		double luma = (Voltage / 7.0);

		// Find the number of samples to display (with taking error into account
		SampleError += delta / SampleTime;
		int samples = (int)SampleError;
		SampleError -= samples;

		while (samples-- > 0)
		{
			BackLog[BackLogIndex++] = luma;
			if (BackLogIndex >= BackLog.Length)
				BackLogIndex = 0;

			if (prior > luma)
			{
				double linePulse = (time - SyncTime) / SampleTime;

				if (linePulse < 447)
					baseChroma = time;

				// Find out aproximately how much of a difference there is from the base phase
				chroma = (time - baseChroma) / ColorCarrier + 0.75;
				// Round it down, and color correct
				chroma = 1.0 - (chroma - (int)chroma);
			}
			prior = luma;

			double minAmp = 8;
			double maxAmp = -1;

			for (int i = 0; i < BackLog.Length; i++)
			{
				if (minAmp > BackLog[i])
					minAmp = BackLog[i];
				if (maxAmp < BackLog[i])
					maxAmp = BackLog[i];
			}

			double amplitude = (maxAmp + minAmp) / 2;
			double saturation = (maxAmp - minAmp);

			if (++PixelError < PixelPitch)
				continue;
			PixelError = 0;

			if (RasterX < Picture.Width)
			{
				// Proper color screen
				Picture.SetPixel(
					RasterX++, RasterY,
					HSVtoRGB(chroma, saturation, amplitude)
					);
			}
		}

		Voltage =
			((pinStates[12] == PinState.OUTPUT_HI) ? 1 : 0) +
			((pinStates[13] == PinState.OUTPUT_HI) ? 2 : 0) +
			((pinStates[14] == PinState.OUTPUT_HI) ? 4 : 0);

		if (Voltage == 0)
		{
			if (!Syncing)
			{
				SyncTime = time;
				Syncing = true;
			}
			return;
		}
		else
		{
			if (Syncing)
			{
				double syncClocks = (time - SyncTime) / SampleTime;

				// We found a HSYNC pulse
				if (syncClocks < 300)
				{
					// Increment our display counters
					RasterX = 0;
					RasterY += 2;

					// Fix horizontal error
					SampleError = 0;
					PixelError = 0;

					if (RasterY >= Picture.Height)
						RasterY = 0;
				}
				// Vertical sync pulse
				else if (RasterY > 100)
				{
					RasterY = MidRaster ? 0 : 1;
					MidRaster = !MidRaster;
				}
				Syncing = false;
			}
		}
	}
}
]]></code>
</plugin>