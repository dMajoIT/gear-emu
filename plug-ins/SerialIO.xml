<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plugin[<!ELEMENT plugin (instance, reference*, code)>
<!ATTLIST plugin version CDATA "1.0">
<!ELEMENT instance EMPTY>
<!ATTLIST instance class CDATA #REQUIRED>
<!ELEMENT reference EMPTY>
<!ATTLIST reference name CDATA #REQUIRED>
<!ELEMENT code (#PCDATA)>
<!ATTLIST code codeFileName CDATA #IMPLIED>]>
<plugin version="1.0">
  <instance class="SerialIO" />
  <code><![CDATA[//
// SerialIO v0.4
//    A Plugin to the Gear PropellerCPU Simulator that allows connecting
//    to a FullDuplexSerial object running on the PropellerCPU chip.
//
// CHANGELOG
// v0.4 - Fix tab order.  Clear transmit buffer on "Clear Text" button click.
// v0.3 - Adds a scrollbar and automatically scrolls down as text comes in.
// v0.2 - Fixes a bug in handling receiving a 0 byte.
// v0.1 - Initial release.
//
// 2009 Ben Levitt
//

//Assemblies needed for GEAR plugin system
using Gear.PluginSupport;
using Gear.EmulationCore;
using System;
using System.Drawing;
using System.Windows.Forms;

//Class declaration of plugin
class SerialIO : PluginBase
{
	private enum RxPhaseEnum
	{
		waitForHigh,
		waitForLow,
		waitForData
	}

	private enum TxPhaseEnum
	{
		idle,
		sendLow,
		sendData,
		sendHigh
	}

	public class SerialTextBox : TextBox
	{
		public SerialIO serial;

		private const int WM_PASTE = 0x0302;

		protected override void WndProc(ref Message m)
		{
			switch (m.Msg)
			{
				case WM_PASTE:
					if (Clipboard.ContainsText() == true)
					{
						// Add to the send buffer
						this.serial.SendString(Clipboard.GetText());
					}
					break;

				default:
					base.WndProc(ref m);
					break;
			}
		}
	}

	private int rxPin;
	private int txPin;
	private int baud;
	private double bitTime;

	private String displayBuffer;

	private double rxLastTime;
	private RxPhaseEnum rxPhase;
	private int rxBitPos;
	private int rxCurrentByte;

	private String txBuffer;
	private double txLastTime;
	private TxPhaseEnum txPhase;
	private int txBitPos;

	// GUI elements
	private TextBox rxPinField;
	private TextBox txPinField;
	private TextBox baudField;

	private SerialTextBox bodyField;

	//Constructor for plugin initialization.
	public SerialIO(PropellerCPU chip) : base(chip)
	{
		rxPin = 30;
		txPin = 31;
		baud = 57600;
		displayBuffer = string.Empty;

		this.BuildGui();
		this.OnReset();
	}

	//Title to be shown in tab
	public override string Title
	{
		get { return "Serial"; }
	}

	//Allow or not key press detecting on the plugin.
	public override Boolean AllowHotKeys
	{
		get { return false; }
	}

	//To reset plugin's components or data, to their initial states.
	public override void OnReset()
	{
		// Setup vars
		rxLastTime = 0;
		rxPhase = RxPhaseEnum.waitForHigh;
		rxBitPos = 0;
		rxCurrentByte = 0;

		txBuffer = string.Empty;
		txLastTime = 0;
		txPhase = TxPhaseEnum.idle;
		txBitPos = 0;

		rxPin = Convert.ToInt32(rxPinField.Text);
		txPin = Convert.ToInt32(txPinField.Text);
		baud = Convert.ToInt32(baudField.Text);
		bitTime = 1.0 / baud;
	}

	private void BuildGui()
	{
		// Build the Plugin UI
		System.Windows.Forms.TableLayoutPanel tableLayoutPanel =
			new System.Windows.Forms.TableLayoutPanel();
		System.Windows.Forms.Label rxPinLabel = new System.Windows.Forms.Label();
		System.Windows.Forms.Label txPinLabel = new System.Windows.Forms.Label();
		System.Windows.Forms.Label baudLabel = new System.Windows.Forms.Label();
		System.Windows.Forms.Button resetButton = new System.Windows.Forms.Button();
		System.Windows.Forms.Button clearButton = new System.Windows.Forms.Button();

		this.rxPinField = new System.Windows.Forms.TextBox();
		this.txPinField = new System.Windows.Forms.TextBox();
		this.baudField = new System.Windows.Forms.TextBox();
		this.bodyField = new SerialTextBox();

		this.SuspendLayout();
		tableLayoutPanel.SuspendLayout();

		tableLayoutPanel.ColumnCount = 8;
		tableLayoutPanel.ColumnStyles.Add(
			new System.Windows.Forms.ColumnStyle(
				System.Windows.Forms.SizeType.Percent, 15F));
		tableLayoutPanel.ColumnStyles.Add(
			new System.Windows.Forms.ColumnStyle(
				System.Windows.Forms.SizeType.Percent, 15F));
		tableLayoutPanel.ColumnStyles.Add(
			new System.Windows.Forms.ColumnStyle(
				System.Windows.Forms.SizeType.Percent, 15F));
		tableLayoutPanel.ColumnStyles.Add(
			new System.Windows.Forms.ColumnStyle(
				System.Windows.Forms.SizeType.Percent, 15F));
		tableLayoutPanel.ColumnStyles.Add(
			new System.Windows.Forms.ColumnStyle(
				System.Windows.Forms.SizeType.Percent, 15F));
		tableLayoutPanel.ColumnStyles.Add(
			new System.Windows.Forms.ColumnStyle(
				System.Windows.Forms.SizeType.Percent, 15F));
		tableLayoutPanel.ColumnStyles.Add(
			new System.Windows.Forms.ColumnStyle(
				System.Windows.Forms.SizeType.Percent, 15F));
		tableLayoutPanel.ColumnStyles.Add(
			new System.Windows.Forms.ColumnStyle(
				System.Windows.Forms.SizeType.Percent, 15F));

		tableLayoutPanel.Controls.Add(clearButton, 0, 0);
		tableLayoutPanel.Controls.Add(rxPinLabel, 1, 0);
		tableLayoutPanel.Controls.Add(this.rxPinField, 2, 0);
		tableLayoutPanel.Controls.Add(txPinLabel, 3, 0);
		tableLayoutPanel.Controls.Add(this.txPinField, 4, 0);
		tableLayoutPanel.Controls.Add(baudLabel, 5, 0);
		tableLayoutPanel.Controls.Add(this.baudField, 6, 0);
		tableLayoutPanel.Controls.Add(resetButton, 7, 0);
		tableLayoutPanel.Controls.Add(this.bodyField, 0, 1);

		tableLayoutPanel.SetColumnSpan(this.bodyField, 8);

		tableLayoutPanel.GrowStyle =
			System.Windows.Forms.TableLayoutPanelGrowStyle.FixedSize;
		tableLayoutPanel.Dock = System.Windows.Forms.DockStyle.Fill;
		tableLayoutPanel.Name = "tableLayoutPanel";
		tableLayoutPanel.RowCount = 2;
		tableLayoutPanel.RowStyles.Add(
			new System.Windows.Forms.RowStyle(
				System.Windows.Forms.SizeType.Absolute, 30F));
		tableLayoutPanel.RowStyles.Add(
			new System.Windows.Forms.RowStyle(
				System.Windows.Forms.SizeType.Percent, 100F));
		tableLayoutPanel.TabIndex = 6;

		rxPinLabel.Text = "Rx Pin:";
		rxPinLabel.TextAlign = ContentAlignment.MiddleRight;
		rxPinLabel.Dock = System.Windows.Forms.DockStyle.Fill;

		txPinLabel.Text = "Tx Pin:";
		txPinLabel.TextAlign = ContentAlignment.MiddleRight;
		txPinLabel.Dock = System.Windows.Forms.DockStyle.Fill;

		baudLabel.Text = "Baud Rate:";
		baudLabel.TextAlign = ContentAlignment.MiddleRight;
		baudLabel.Dock = System.Windows.Forms.DockStyle.Fill;

		this.rxPinField.BackColor = System.Drawing.SystemColors.Window;
		this.rxPinField.Font = new System.Drawing.Font("Courier New", 9.75F,
			 System.Drawing.FontStyle.Regular,
			 System.Drawing.GraphicsUnit.Point, ((byte)(0)));
		this.rxPinField.Multiline = false;
		this.rxPinField.Text = Convert.ToString(rxPin);
		this.rxPinField.Dock = System.Windows.Forms.DockStyle.Fill;
		this.rxPinField.Name = "rxPinField";
		this.rxPinField.TabIndex = 2;

		this.txPinField.BackColor = System.Drawing.SystemColors.Window;
		this.txPinField.Font = new System.Drawing.Font("Courier New", 9.75F,
			 System.Drawing.FontStyle.Regular,
			 System.Drawing.GraphicsUnit.Point, ((byte)(0)));
		this.txPinField.Multiline = false;
		this.txPinField.Text = Convert.ToString(txPin);
		this.txPinField.Dock = System.Windows.Forms.DockStyle.Fill;
		this.txPinField.Name = "txPinField";
		this.txPinField.TabIndex = 3;

		this.baudField.BackColor = System.Drawing.SystemColors.Window;
		this.baudField.Font = new System.Drawing.Font("Courier New", 9.75F,
			 System.Drawing.FontStyle.Regular,
			 System.Drawing.GraphicsUnit.Point, ((byte)(0)));
		this.baudField.Multiline = false;
		this.baudField.Text = Convert.ToString(baud);
		this.baudField.Dock = System.Windows.Forms.DockStyle.Fill;
		this.baudField.Name = "baudField";
		this.baudField.TabIndex = 4;

		this.bodyField.BackColor = System.Drawing.SystemColors.Window;
		this.bodyField.Font = new System.Drawing.Font("Courier New", 9.75F,
			 System.Drawing.FontStyle.Regular,
			 System.Drawing.GraphicsUnit.Point, ((byte)(0)));
		//this.bodyField.ReadOnly = true;
		this.bodyField.Multiline = true;
		this.bodyField.WordWrap = true;
		this.bodyField.Name = "bodyField";
		this.bodyField.ScrollBars = ScrollBars.Vertical;
		this.bodyField.TabIndex = 0;
		this.bodyField.Dock = System.Windows.Forms.DockStyle.Fill;
		this.bodyField.KeyPress +=
			new System.Windows.Forms.KeyPressEventHandler(this.txt_KeyPress);
		this.bodyField.serial = this;

		resetButton.Text = "Reset Serial";
		resetButton.TabIndex = 5;
		resetButton.Name = "resetButton";
		resetButton.Dock = System.Windows.Forms.DockStyle.Fill;
		resetButton.Click += new System.EventHandler(this.reset_Click);

		clearButton.Text = "Clear Text";
		clearButton.TabIndex = 1;
		clearButton.Name = "clearButton";
		clearButton.Dock = System.Windows.Forms.DockStyle.Fill;
		clearButton.Click += new System.EventHandler(this.clear_Click);

		this.Controls.Add(tableLayoutPanel);
		tableLayoutPanel.ResumeLayout(false);
		tableLayoutPanel.PerformLayout();
		this.ResumeLayout(false);
		this.PerformLayout();

		this.bodyField.Focus();
	}

	//Register the events to be notified to this plugin.
	public override void PresentChip()
	{
		NotifyOnClock();
		DrivePin(txPin, false, true);
	}

	//Called every clock tick, only if it was registered on method
	//PresentChip() above.
	public override void OnClock(double time, uint sysCounter)
	{
		this.HandleRx(time);
		this.HandleTx(time);
	}

	private void HandleRx(double time)
	{
		bool bit = ((Chip.OUT & ((ulong)1 << rxPin)) != 0);

		if (rxPhase == RxPhaseEnum.waitForHigh)
		{
			if (bit)
				rxPhase = RxPhaseEnum.waitForLow;
			return;
		}
		else if (rxPhase == RxPhaseEnum.waitForLow)
		{
			if (!bit)
			{
				rxPhase = RxPhaseEnum.waitForData;
				rxLastTime = time + bitTime / 2;
			}
			return;
		}
		else if (rxPhase == RxPhaseEnum.waitForData)
		{
			double delta = time - rxLastTime;

			if (delta > bitTime)
			{
				this.GetBit(bit);
				rxLastTime += bitTime;
			}
		}
	}

	private void GetBit(bool bit)
	{
		if (bit)
			rxCurrentByte |= (1 << rxBitPos);
		rxBitPos++;

		if (rxBitPos == 8)
		{
			rxBitPos = 0;
			rxPhase = RxPhaseEnum.waitForHigh /*0*/;

			if (rxCurrentByte == '\r' || rxCurrentByte == '\n')
				displayBuffer += "\r\n";
			else if (rxCurrentByte > 0)
			{
				displayBuffer += Convert.ToChar(rxCurrentByte);
			}

			rxCurrentByte = 0;
			this.bodyField.Text = displayBuffer;
			this.bodyField.SelectionStart = this.bodyField.Text.Length;
			this.bodyField.ScrollToCaret();
		}
	}

	private void HandleTx(double time)
	{
		if (txPhase == TxPhaseEnum.sendLow)
		{
			DrivePin(txPin, false, false);
			txPhase = TxPhaseEnum.sendData;
			txLastTime = time;
			return;
		}
		else if (txPhase == TxPhaseEnum.sendData)
		{
			double delta = time - txLastTime;

			if (delta > bitTime)
			{
				this.SendBit();
				txLastTime += bitTime;
			}
		}
		else if (txPhase == TxPhaseEnum.sendHigh)
		{
			double delta = time - txLastTime;

			if (delta > bitTime)
				txPhase = ((txBuffer.Length > 0) ?
					TxPhaseEnum.sendLow /*1*/ :
					TxPhaseEnum.idle /*0*/);
			return;
		}
	}

	private void SendBit()
	{
		if (txBitPos == 8)
		{
			txBitPos = 0;
			txPhase = TxPhaseEnum.sendHigh /*3*/;
			txBuffer = txBuffer.Substring(1, txBuffer.Length - 1);
			DrivePin(txPin, true, true);
			return;
		}

		int sendByte = (int)(txBuffer[0]);
		bool bit = ((sendByte & (1 << txBitPos)) != 0);
		DrivePin(txPin, false, bit);

		txBitPos++;
	}

	// Handle Paste
	public void SendString(String str)
	{
		txBuffer += str;
		displayBuffer += str;
		this.bodyField.Text = displayBuffer;
		this.bodyField.SelectionStart = this.bodyField.Text.Length;
		this.bodyField.ScrollToCaret();

		if (txPhase == TxPhaseEnum.idle /*0*/)
			txPhase = TxPhaseEnum.sendLow /*1*/;
	}

	private void ClearText()
	{
		displayBuffer = string.Empty;
		this.bodyField.Text = displayBuffer;
		if (txBuffer.Length > 0)
			txBuffer = txBuffer.Substring(0, 1);
	}

	private void txt_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
	{
		if ((Control.ModifierKeys & Keys.Control) != 0)
			return;

		e.Handled = true;
		txBuffer += e.KeyChar;
		if (e.KeyChar == '\n' || e.KeyChar == '\r')
			displayBuffer += "\r\n";
		else
			displayBuffer += e.KeyChar;

		this.bodyField.Text = displayBuffer;
		this.bodyField.SelectionStart = this.bodyField.Text.Length;
		this.bodyField.ScrollToCaret();

		if (txPhase == TxPhaseEnum.idle /*0*/)
			txPhase = TxPhaseEnum.sendLow /*1*/;
	}

	private void clear_Click(object sender, System.EventArgs e)
	{
		this.ClearText();
		this.bodyField.Focus();
	}

	private void reset_Click(object sender, System.EventArgs e)
	{
		this.OnReset();
		this.bodyField.Focus();
	}
}
]]></code>
</plugin>
